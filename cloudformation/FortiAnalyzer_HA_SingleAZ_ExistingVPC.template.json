{
	"AWSTemplateFormatVersion": "2010-09-09",
	"Description": "(v8.7) AWS CFT to deploy a FortiAnalyzer HA pair into an existing VPC",
	"Metadata": {
		"AWS::CloudFormation::Interface": {
			"ParameterGroups": [
				{
					"Label": {
						"default": "VPC Configuration"
					},
					"Parameters": [
						"VPCID",
						"VPCCIDR",
						"PublicOrPrivateSubnet"
					]
				},
				{
					"Label": {
						"default": "FortiAnalyzer Instance Configuration"
					},
					"Parameters": [
						"InstanceType",
						"CIDRForInstanceAccess",
						"KeyPair",
						"EncryptVolumes",
						"PubliclyAvailable",
						"S3EndpointDeployment",
						"SubnetRouteTableID",
						"FortiAnalyzerVersion",
						"LicenseType",
						"InitS3Bucket",
						"FortiAnalyzer1SerialNumber",
						"FortiAnalyzer2SerialNumber",
						"FortiAnalyzer1LicenseFile",
						"FortiAnalyzer2LicenseFile",
						"FortiAnalyzer1FortiFlexToken",
						"FortiAnalyzer2FortiFlexToken"
					]
				},
				{
					"Label": {
						"default": "Interface IP Configuration for FortiAnalyzer1"
					},
					"Parameters": [
						"FortiAnalyzer1PrimaryIP"
					]
				},
				{
					"Label": {
						"default": "Interface IP Configuration for FortiAnalyzer2"
					},
					"Parameters": [
						"FortiAnalyzer2PrimaryIP"
					]
				},
				{
					"Label": {
						"default": "Interface IP Configuration for the Cluster"
					},
					"Parameters": [
						"ClusterIP"
					]
				}
			]
		}
	},
	"Parameters": {
		"VPCID": {
			"Type": "AWS::EC2::VPC::Id",
			"Description": "Select the VPC to use"
		},
		"VPCCIDR": {
			"Type": "String",
			"Default": "10.1.0.0/16",
			"Description": "Provide a network CIDR for the VPC",
			"AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]){1}(\\/([0-9]|[1-2][0-9]|3[0-2]))?$",
			"ConstraintDescription": "must be a valid CIDR block format."
		},
		"PublicOrPrivateSubnet": {
			"Type": "AWS::EC2::Subnet::Id",
			"Description": "Select the subnet for PublicOrPrivateSubnet2"
		},
		"FortiAnalyzer1PrimaryIP": {
			"Type": "String",
			"Default": "10.1.1.10/24",
			"Description": "Provide the primary IP address in CIDR form for FortiAnalyzer1 to use (IP from PublicOrPrivateSubnet1)",
			"AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]){1}(\\/([0-9]|[1-2][0-9]|3[0-2]))?$",
			"ConstraintDescription": "must be a valid CIDR block format."
		},
		"FortiAnalyzer2PrimaryIP": {
			"Type": "String",
			"Default": "10.1.1.11/24",
			"Description": "Provide the primary IP address in CIDR form for FortiAnalyzer2 to use (IP from PublicOrPrivateSubnet2)",
			"AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]){1}(\\/([0-9]|[1-2][0-9]|3[0-2]))?$",
			"ConstraintDescription": "must be a valid CIDR block format."
		},
		"ClusterIP": {
			"Type": "String",
			"Default": "10.1.1.12/24",
			"Description": "Provide the secondary IP address in CIDR form for the Cluster to use (IP from PublicOrPrivateSubnet1)",
			"AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]){1}(\\/([0-9]|[1-2][0-9]|3[0-2]))?$",
			"ConstraintDescription": "must be a valid CIDR block format."
		},
		"PubliclyAvailable": {
			"Type": "String",
			"Default": "Yes",
			"Description": "Select 'Yes' if the FAZ will have an EIP to be publicly available or not.  *** If you select 'No', then an S3 endpoint needs to be deployed and reachable from the subnet the FortiAnalyzers are in to successfully bootstrap.  Also, the FortiAnalyzers require internet access to communicate with FortiCare successfully for license validation. ***",
			"AllowedValues": [
				"Yes",
				"No"
			]
		},
		"S3EndpointDeployment": {
			"Type": "String",
			"Description": "Select if a new S3 Endpoint should be deployed or not. If you are using public subnets and 'PubliclyAvailable' is 'Yes' then select UseExisting.  *** If the FortiAnalyzers does not have direct internet access, an S3 Endpoint should be used and associated to the subnet the FortiAnalyzers will be deployed in for successful bootstrapping. Also, the FortiAnalyzers require internet access to communicate with FortiCare successfully for license validation. ***",
			"AllowedValues": [
				"DeployNew",
				"UseExisting"
			]
		},
		"SubnetRouteTableID": {
			"Type": "String",
			"Description": "If a new S3 Endpoint is to be deployed, provide the route table ID associated with the subnet the FortiAnalyzers will be deployed in."
		},
		"InstanceType": {
			"Type": "String",
			"Default": "m5.2xlarge",
			"Description": "Select the instance type for the FortiAnalyzers.  *** If using PAYG2Devices for LicenseType, you can only use up to a m5.xlarge. Check current Marketplace listings for PAYG options to confirm instance type selected is supported. ***",
			"AllowedValues": [
				"m5.xlarge",
				"m5.2xlarge",
				"m5.4xlarge",
				"m5.8xlarge",
				"m5.12xlarge",
				"m6i.xlarge",
				"m6i.2xlarge",
				"m6i.4xlarge",
				"m6i.8xlarge",
				"m6i.16xlarge",
				"m6i.32xlarge",
				"h1.2xlarge",
				"h1.4xlarge",
				"h1.8xlarge",
				"h1.16xlarge",
				"m6a.xlarge",
				"m6a.2xlarge",
				"m6a.4xlarge",
				"m6a.8xlarge",
				"m6a.16xlarge",
				"m6a.32xlarge",
				"m7a.xlarge",
				"m7a.2xlarge",
				"m7a.4xlarge",
				"m7a.8xlarge",
				"m7a.16xlarge",
				"m7a.32xlarge"
			]
		},
		"CIDRForInstanceAccess": {
			"Type": "String",
			"Default": "0.0.0.0/0",
			"Description": "Provide a network CIDR from which the FortiAnalyzer instances will be accessed"
		},
		"KeyPair": {
			"Type": "AWS::EC2::KeyPair::KeyName",
			"Description": "Select a keypair to associate with the FortiAnalyzers"
		},
		"EncryptVolumes": {
			"Type": "String",
			"Description": "Select 'true' to encrypt the FortiAnalyzer instances OS and Log volumes with your account's KMS default master key for EBS.  Otherwise select false to leave unencrypted",
			"AllowedValues": [
				"true",
				"false"
			]
		},
		"InitS3Bucket": {
			"Type": "String",
			"Description": "[BYOL Only, leave blank otherwise] Provide the Init S3 Bucket name, where your config files will be created  *** the bucket should exist in the same region as this deployment for successful bootstrapping ***"
		},
		"FortiAnalyzerVersion": {
			"Type": "String",
			"Default": "7.4.x",
			"Description": "Select the verion of FortiAnalyzer to use (latest GA AMI will be used)",
			"AllowedValues": [
				"7.2.x",
				"7.4.x",
				"7.6.x"
			]
		},
		"LicenseType": {
			"Type": "String",
			"Description": "Select the license type for the FortiAnalyzers",
			"AllowedValues": [
				"BYOL",
				"Flex",
				"PAYG10Devices",
				"PAYG30Devices",
				"PAYG100Devices",
				"PAYG500Devices"
			]
		},
		"FortiAnalyzer1SerialNumber": {
			"Type": "String",
			"Description": "[BYOL & Flex Only, leave blank for PAYG] Provide the serial number for FortiAnalyzer1 that matches it's license (ie FAZ-VMTM00000001)"
		},
		"FortiAnalyzer2SerialNumber": {
			"Type": "String",
			"Description": "[BYOL & Flex Only, leave blank for PAYG] Provide the serial number for FortiAnalyzer2 that matches it's license (ie FAZ-VMTM00000002)"
		},
		"FortiAnalyzer1LicenseFile": {
			"Type": "String",
			"Description": "[BYOL Only, leave blank for otherwise] Provide the name of the BYOL license file in the Init S3 Bucket for FortiAnalyzer1 (ie faz1.lic or prefix/faz1.lic)"
		},
		"FortiAnalyzer2LicenseFile": {
			"Type": "String",
			"Description": "[BYOL Only, leave blank for otherwise] Provide the name of the BYOL license file in the Init S3 Bucket for FortiAnalyzer2 (ie faz2.lic or prefix/faz2.lic)"
		},
		"FortiAnalyzer1FortiFlexToken": {
			"Type": "String",
			"Description": "[Flex Only, leave blank otherwise] Provide the FortiFlex Token for FortiAnalyzer1 (ie 1A2B3C4D5E6F7G8H9I0J)"
		},
		"FortiAnalyzer2FortiFlexToken": {
			"Type": "String",
			"Description": "[Flex Only, leave blank otherwise] Provide the FortiFlex Token for FortiAnalyzer2 (ie 2B3C4D5E6F7G8H9I0J1K)"
		}
	},
	"Mappings": {
		"FortiAnalyzerAMISearchString": {
			"7.2.x": {
				"BYOL": "FortiAnalyzer-VM64-AWS *(7.2.*)*|9ipdy7tpkp24kmfsjgfuymny1",
				"Flex": "FortiAnalyzer-VM64-AWS *(7.2.*)*|9ipdy7tpkp24kmfsjgfuymny1",
				"PAYG2Devices": "FortiAnalyzer-VM64-AWSONDEMAND *(7.2.*)*|9dtuu71e8jl604ce11efi1mzo",
				"PAYG10Devices": "FortiAnalyzer-VM64-AWSONDEMAND *(7.2.*)*|5fjrlla50pzzq1c8064gnm11n",
				"PAYG30Devices": "FortiAnalyzer-VM64-AWSONDEMAND *(7.2.*)*|f260v7j9fwdvlcsbnpsjpaozc",
				"PAYG100Devices": "FortiAnalyzer-VM64-AWSONDEMAND *(7.2.*)*|3nlrca0hphlsq7bl6v99smx10",
				"PAYG500Devices": "FortiAnalyzer-VM64-AWSONDEMAND *(7.2.*)*|dlwisgg79vzzo3zeommthp0zv"
			},
			"7.4.x": {
				"BYOL": "FortiAnalyzer-VM64-AWS *(7.4.*)*|9ipdy7tpkp24kmfsjgfuymny1",
				"Flex": "FortiAnalyzer-VM64-AWS *(7.4.*)*|9ipdy7tpkp24kmfsjgfuymny1",
				"PAYG2Devices": "FortiAnalyzer-VM64-AWSONDEMAND *(7.4.*)*|9dtuu71e8jl604ce11efi1mzo",
				"PAYG10Devices": "FortiAnalyzer-VM64-AWSONDEMAND *(7.4.*)*|5fjrlla50pzzq1c8064gnm11n",
				"PAYG30Devices": "FortiAnalyzer-VM64-AWSONDEMAND *(7.4.*)*|f260v7j9fwdvlcsbnpsjpaozc",
				"PAYG100Devices": "FortiAnalyzer-VM64-AWSONDEMAND *(7.4.*)*|3nlrca0hphlsq7bl6v99smx10",
				"PAYG500Devices": "FortiAnalyzer-VM64-AWSONDEMAND *(7.4.*)*|dlwisgg79vzzo3zeommthp0zv"
			},
			"7.6.x": {
				"BYOL": "FortiAnalyzer-VM64-AWS *(7.6.*)*|9ipdy7tpkp24kmfsjgfuymny1",
				"Flex": "FortiAnalyzer-VM64-AWS *(7.6.*)*|9ipdy7tpkp24kmfsjgfuymny1",
				"PAYG2Devices": "FortiAnalyzer-VM64-AWSONDEMAND *(7.6.*)*|9dtuu71e8jl604ce11efi1mzo",
				"PAYG10Devices": "FortiAnalyzer-VM64-AWSONDEMAND *(7.6.*)*|5fjrlla50pzzq1c8064gnm11n",
				"PAYG30Devices": "FortiAnalyzer-VM64-AWSONDEMAND *(7.6.*)*|f260v7j9fwdvlcsbnpsjpaozc",
				"PAYG100Devices": "FortiAnalyzer-VM64-AWSONDEMAND *(7.6.*)*|3nlrca0hphlsq7bl6v99smx10",
				"PAYG500Devices": "FortiAnalyzer-VM64-AWSONDEMAND *(7.6.*)*|dlwisgg79vzzo3zeommthp0zv"
			}
		}
	},
	"Conditions": {
		"CreateS3Endpoint": {
			"Fn::Equals": [
				{
					"Ref": "S3EndpointDeployment"
				},
				"DeployNew"
			]
		},
		"CreateEIP": {
			"Fn::Equals": [
				{
					"Ref": "PubliclyAvailable"
				},
				"Yes"
			]
		},
		"BYOL": {
			"Fn::And": [
				{
					"Fn::Equals": [
						{
							"Ref": "LicenseType"
						},
						"BYOL"
					]
				},
				{
					"Fn::Not": [
						{
							"Fn::Equals": [
								{
									"Ref": "InitS3Bucket"
								},
								""
							]
						}
					]
				},
				{
					"Fn::Not": [
						{
							"Fn::Equals": [
								{
									"Ref": "FortiAnalyzer1LicenseFile"
								},
								""
							]
						}
					]
				},
				{
					"Fn::Not": [
						{
							"Fn::Equals": [
								{
									"Ref": "FortiAnalyzer2LicenseFile"
								},
								""
							]
						}
					]
				}
			]
		},
		"FortiFlex": {
			"Fn::And": [
				{
					"Fn::Equals": [
						{
							"Ref": "LicenseType"
						},
						"Flex"
					]
				},
				{
					"Fn::Not": [
						{
							"Fn::Equals": [
								{
									"Ref": "FortiAnalyzer1FortiFlexToken"
								},
								""
							]
						}
					]
				},
				{
					"Fn::Not": [
						{
							"Fn::Equals": [
								{
									"Ref": "FortiAnalyzer2FortiFlexToken"
								},
								""
							]
						}
					]
				}
			]
		}
	},
	"Resources": {
		"S3Endpoint": {
			"Type": "AWS::EC2::VPCEndpoint",
			"Condition": "CreateS3Endpoint",
			"Properties": {
				"PolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [
						{
							"Effect": "Allow",
							"Principal": "*",
							"Action": [
								"s3:GetObject"
							],
							"Resource": [
								"*"
							]
						}
					]
				},
				"RouteTableIds": [
					{
						"Ref": "SubnetRouteTableID"
					}
				],
				"ServiceName": {
					"Fn::Sub": "com.amazonaws.${AWS::Region}.s3"
				},
				"VpcId": {
					"Ref": "VPCID"
				}
			}
		},
		"InstanceRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"AssumeRolePolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [
						{
							"Effect": "Allow",
							"Principal": {
								"Service": [
									"ec2.amazonaws.com"
								]
							},
							"Action": [
								"sts:AssumeRole"
							]
						}
					]
				},
				"Path": "/",
				"Policies": [
					{
						"PolicyName": "FGCPPolicy",
						"PolicyDocument": {
							"Version": "2012-10-17",
							"Statement": [
								{
									"Sid": "BootStrapFromS3",
									"Effect": "Allow",
									"Action": [
										"s3:GetObject"
									],
									"Resource": "*"
								},
								{
									"Sid": "FazHA7mr4p2orNewer",
									"Effect": "Allow",
									"Action": [
										"ec2:AssignPrivateIpAddresses",
										"ec2:DescribeSubnets",
										"ec2:DescribeNetworkInterfaces",
										"ec2:DescribeAddresses",
										"ec2:AssociateAddress",
										"ec2:CreateTags"
									],
									"Resource": "*"
								},
								{
									"Sid": "SDNConnectorFortiView",
									"Effect": "Allow",
									"Action": [
										"ec2:DescribeInstances",
										"ec2:DescribeRegions",
										"ec2:DescribeVpcEndpoints",
										"eks:DescribeCluster",
										"eks:ListClusters",
										"inspector:DescribeFindings",
										"inspector:ListFindings"
									],
									"Resource": "*"
								}
							]
						}
					}
				]
			}
		},
		"InstanceProfile": {
			"Type": "AWS::IAM::InstanceProfile",
			"Properties": {
				"Path": "/",
				"Roles": [
					{
						"Ref": "InstanceRole"
					}
				]
			}
		},
		"FortiAnalyzerSecGrp": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"VpcId": {
					"Ref": "VPCID"
				},
				"GroupDescription": "FortiAnalyzerSecGrp",
				"SecurityGroupIngress": [
					{
						"Description": "Allow remote access to Faz",
						"IpProtocol": "-1",
						"FromPort": "0",
						"ToPort": "65535",
						"CidrIp": {
							"Ref": "CIDRForInstanceAccess"
						}
					},
					{
						"Description": "Allow local VPC access to Faz",
						"IpProtocol": "-1",
						"FromPort": "0",
						"ToPort": "65535",
						"CidrIp": {
							"Ref": "VPCCIDR"
						}
					},
					{
						"Description": "Allow 10.0.0.0/8 access to tcp port 541 Faz",
						"IpProtocol": "tcp",
						"FromPort": "541",
						"ToPort": "541",
						"CidrIp": "10.0.0.0/8"
					},
					{
						"Description": "Allow 172.16.0.0/12 access to tcp port 541 Faz",
						"IpProtocol": "tcp",
						"FromPort": "541",
						"ToPort": "541",
						"CidrIp": "172.16.0.0/12"
					},
					{
						"Description": "Allow 192.168.0.0/16 access to tcp port 541 Faz",
						"IpProtocol": "tcp",
						"FromPort": "541",
						"ToPort": "541",
						"CidrIp": "192.168.0.0/16"
					},
					{
						"Description": "Allow 10.0.0.0/8 access to tcp port 514 Faz",
						"IpProtocol": "tcp",
						"FromPort": "514",
						"ToPort": "514",
						"CidrIp": "10.0.0.0/8"
					},
					{
						"Description": "Allow 172.16.0.0/12 access to tcp port 514 Faz",
						"IpProtocol": "tcp",
						"FromPort": "514",
						"ToPort": "514",
						"CidrIp": "172.16.0.0/12"
					},
					{
						"Description": "Allow 192.168.0.0/16 access to tcp port 514 Faz",
						"IpProtocol": "tcp",
						"FromPort": "514",
						"ToPort": "514",
						"CidrIp": "192.168.0.0/16"
					},
					{
						"Description": "Allow 10.0.0.0/8 access to udp port 514 Faz",
						"IpProtocol": "udp",
						"FromPort": "514",
						"ToPort": "514",
						"CidrIp": "10.0.0.0/8"
					},
					{
						"Description": "Allow 172.16.0.0/12 access to udp port 514 Faz",
						"IpProtocol": "udp",
						"FromPort": "514",
						"ToPort": "514",
						"CidrIp": "172.16.0.0/12"
					},
					{
						"Description": "Allow 192.168.0.0/16 access to udp port 514 Faz",
						"IpProtocol": "udp",
						"FromPort": "514",
						"ToPort": "514",
						"CidrIp": "192.168.0.0/16"
					}
				]
			}
		},
		"FortiAnalyzerSecGrpHArule": {
			"DependsOn": "FortiAnalyzerSecGrp",
			"Type": "AWS::EC2::SecurityGroupIngress",
			"Properties": {
				"GroupId": {
					"Ref": "FortiAnalyzerSecGrp"
				},
				"Description": "Allow FAZs to access each other (ICMP, VRRP, etc)",
				"IpProtocol": "-1",
				"FromPort": "0",
				"ToPort": "65535",
				"SourceSecurityGroupId": {
					"Ref": "FortiAnalyzerSecGrp"
				}
			}
		},
		"Faz1": {
			"Type": "AWS::EC2::Instance",
			"Properties": {
				"ImageId": {
					"Fn::GetAtt": [
						"RunImageFunction",
						"ami"
					]
				},
				"InstanceType": {
					"Ref": "InstanceType"
				},
				"IamInstanceProfile": {
					"Ref": "InstanceProfile"
				},
				"KeyName": {
					"Ref": "KeyPair"
				},
				"BlockDeviceMappings": [
					{
						"DeviceName": "/dev/sda1",
						"Ebs": {
							"VolumeType": "gp2",
							"VolumeSize": "5",
							"DeleteOnTermination": "true",
							"Encrypted": {
								"Ref": "EncryptVolumes"
							}
						}
					},
					{
						"DeviceName": "/dev/sdb",
						"Ebs": {
							"VolumeType": "gp2",
							"VolumeSize": "80",
							"DeleteOnTermination": "true",
							"Encrypted": {
								"Ref": "EncryptVolumes"
							}
						}
					}
				],
				"NetworkInterfaces": [
					{
						"NetworkInterfaceId": {
							"Ref": "Faz1Eni0"
						},
						"DeviceIndex": "0"
					}
				],
				"Tags": [
					{
						"Key": "Name",
						"Value": {
							"Fn::Join": [
								"",
								[
									{
										"Ref": "AWS::StackName"
									},
									"-FortiAnalyzer1"
								]
							]
						}
					}
				],
				"UserData": {
					"Fn::Base64": {
						"Fn::If": [
							"BYOL",
							{
								"Fn::Join": [
									"",
									[
										"{\n",
										"\"bucket\"",
										" : \"",
										{
											"Ref": "InitS3Bucket"
										},
										"\"",
										",\n",
										"\"region\"",
										" : ",
										"\"",
										{
											"Ref": "AWS::Region"
										},
										"\"",
										",\n",
										"\"license\"",
										" : ",
										"\"",
										"/",
										{
											"Ref": "FortiAnalyzer1LicenseFile"
										},
										"\"",
										",\n",
										"\"config\"",
										" : ",
										"\"",
										"/faz1-config.txt\"",
										"\n",
										"}"
									]
								]
							},
							{
								"Fn::Join": [
									"\n",
									[
										"Content-Type: multipart/mixed; boundary='==Boundary=='",
										"MIME-Version: 1.0",
										"",
										"--==Boundary==",
										"Content-Type: text/x-shellscript; charset='us-ascii'",
										"MIME-Version: 1.0",
										"",
										"config system global",
										{
											"Fn::Join": [
												"",
												[
													"set hostname ",
													{
														"Ref": "AWS::StackName"
													},
													"-Faz1"
												]
											]
										},
										"end",
										"config system interface",
										"edit port1",
										"set mode dhcp",
										"set allowaccess https ping",
										"next",
										"end",
										"config system certificate ca",
										"edit 'AmazonRootCA1'",
										"set ca '-----BEGIN CERTIFICATE-----",
										"MIIDQTCCAimgAwIBAgITBmyfz5m/jAo54vB4ikPmljZbyjANBgkqhkiG9w0BAQsF",
										"ADA5MQswCQYDVQQGEwJVUzEPMA0GA1UEChMGQW1hem9uMRkwFwYDVQQDExBBbWF6",
										"b24gUm9vdCBDQSAxMB4XDTE1MDUyNjAwMDAwMFoXDTM4MDExNzAwMDAwMFowOTEL",
										"MAkGA1UEBhMCVVMxDzANBgNVBAoTBkFtYXpvbjEZMBcGA1UEAxMQQW1hem9uIFJv",
										"b3QgQ0EgMTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALJ4gHHKeNXj",
										"ca9HgFB0fW7Y14h29Jlo91ghYPl0hAEvrAIthtOgQ3pOsqTQNroBvo3bSMgHFzZM",
										"9O6II8c+6zf1tRn4SWiw3te5djgdYZ6k/oI2peVKVuRF4fn9tBb6dNqcmzU5L/qw",
										"IFAGbHrQgLKm+a/sRxmPUDgH3KKHOVj4utWp+UhnMJbulHheb4mjUcAwhmahRWa6",
										"VOujw5H5SNz/0egwLX0tdHA114gk957EWW67c4cX8jJGKLhD+rcdqsq08p8kDi1L",
										"93FcXmn/6pUCyziKrlA4b9v7LWIbxcceVOF34GfID5yHI9Y/QCB/IIDEgEw+OyQm",
										"jgSubJrIqg0CAwEAAaNCMEAwDwYDVR0TAQH/BAUwAwEB/zAOBgNVHQ8BAf8EBAMC",
										"AYYwHQYDVR0OBBYEFIQYzIU07LwMlJQuCFmcx7IQTgoIMA0GCSqGSIb3DQEBCwUA",
										"A4IBAQCY8jdaQZChGsV2USggNiMOruYou6r4lK5IpDB/G/wkjUu0yKGX9rbxenDI",
										"U5PMCCjjmCXPI6T53iHTfIUJrU6adTrCC2qJeHZERxhlbI1Bjjt/msv0tadQ1wUs",
										"N+gDS63pYaACbvXy8MWy7Vu33PqUXHeeE6V/Uq2V8viTO96LXFvKWlJbYK8U90vv",
										"o/ufQJVtMVT8QtPHRh8jrdkPSHCa2XV4cdFyQzR1bldZwgJcJmApzyMZFo6IQ6XU",
										"5MsI+yMRQ+hDKXJioaldXgjUkK642M4UwtBV8ob2xJNDd2ZhwLnoQdeXeGADbkpy",
										"rqXRfboQnoZsG4q5WTP468SQvvG5",
										"-----END CERTIFICATE-----'",
										"set comment 'https://www.amazontrust.com/repository/'",
										"next",
										"edit 'AmazonRootCA2'",
										"set ca '-----BEGIN CERTIFICATE-----",
										"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",
										"4PsJYGw=",
										"-----END CERTIFICATE-----'",
										"set comment 'https://www.amazontrust.com/repository/'",
										"next",
										"edit 'AmazonRootCA3'",
										"set ca '-----BEGIN CERTIFICATE-----",
										"MIIBtjCCAVugAwIBAgITBmyf1XSXNmY/Owua2eiedgPySjAKBggqhkjOPQQDAjA5",
										"MQswCQYDVQQGEwJVUzEPMA0GA1UEChMGQW1hem9uMRkwFwYDVQQDExBBbWF6b24g",
										"Um9vdCBDQSAzMB4XDTE1MDUyNjAwMDAwMFoXDTQwMDUyNjAwMDAwMFowOTELMAkG",
										"A1UEBhMCVVMxDzANBgNVBAoTBkFtYXpvbjEZMBcGA1UEAxMQQW1hem9uIFJvb3Qg",
										"Q0EgMzBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABCmXp8ZBf8ANm+gBG1bG8lKl",
										"ui2yEujSLtf6ycXYqm0fc4E7O5hrOXwzpcVOho6AF2hiRVd9RFgdszflZwjrZt6j",
										"QjBAMA8GA1UdEwEB/wQFMAMBAf8wDgYDVR0PAQH/BAQDAgGGMB0GA1UdDgQWBBSr",
										"ttvXBp43rDCGB5Fwx5zEGbF4wDAKBggqhkjOPQQDAgNJADBGAiEA4IWSoxe3jfkr",
										"BqWTrBqYaGFy+uGh0PsceGCmQ5nFuMQCIQCcAu/xlJyzlvnrxir4tiz+OpAUFteM",
										"YyRIHN8wfdVoOw==",
										"-----END CERTIFICATE-----'",
										"set comment 'https://www.amazontrust.com/repository/'",
										"next",
										"edit 'AmazonRootCA4'",
										"set ca '-----BEGIN CERTIFICATE-----",
										"MIIB8jCCAXigAwIBAgITBmyf18G7EEwpQ+Vxe3ssyBrBDjAKBggqhkjOPQQDAzA5",
										"MQswCQYDVQQGEwJVUzEPMA0GA1UEChMGQW1hem9uMRkwFwYDVQQDExBBbWF6b24g",
										"Um9vdCBDQSA0MB4XDTE1MDUyNjAwMDAwMFoXDTQwMDUyNjAwMDAwMFowOTELMAkG",
										"A1UEBhMCVVMxDzANBgNVBAoTBkFtYXpvbjEZMBcGA1UEAxMQQW1hem9uIFJvb3Qg",
										"Q0EgNDB2MBAGByqGSM49AgEGBSuBBAAiA2IABNKrijdPo1MN/sGKe0uoe0ZLY7Bi",
										"9i0b2whxIdIA6GO9mif78DluXeo9pcmBqqNbIJhFXRbb/egQbeOc4OO9X4Ri83Bk",
										"M6DLJC9wuoihKqB1+IGuYgbEgds5bimwHvouXKNCMEAwDwYDVR0TAQH/BAUwAwEB",
										"/zAOBgNVHQ8BAf8EBAMCAYYwHQYDVR0OBBYEFNPsxzplbszh2naaVvuc84ZtV+WB",
										"MAoGCCqGSM49BAMDA2gAMGUCMDqLIfG9fhGt0O9Yli/W651+kI0rz2ZVwyzjKKlw",
										"CkcO8DdZEv8tmZQoTipPNU0zWgIxAOp1AE47xDqUEpHJWEadIRNyp4iciuRMStuW",
										"1KyLa2tJElMzrdfkviT8tQp21KW8EA==",
										"-----END CERTIFICATE-----'",
										"set comment 'https://www.amazontrust.com/repository/'",
										"next",
										"edit 'SFSRootCAG2'",
										"set ca '-----BEGIN CERTIFICATE-----",
										"MIID7zCCAtegAwIBAgIBADANBgkqhkiG9w0BAQsFADCBmDELMAkGA1UEBhMCVVMx",
										"EDAOBgNVBAgTB0FyaXpvbmExEzARBgNVBAcTClNjb3R0c2RhbGUxJTAjBgNVBAoT",
										"HFN0YXJmaWVsZCBUZWNobm9sb2dpZXMsIEluYy4xOzA5BgNVBAMTMlN0YXJmaWVs",
										"ZCBTZXJ2aWNlcyBSb290IENlcnRpZmljYXRlIEF1dGhvcml0eSAtIEcyMB4XDTA5",
										"MDkwMTAwMDAwMFoXDTM3MTIzMTIzNTk1OVowgZgxCzAJBgNVBAYTAlVTMRAwDgYD",
										"VQQIEwdBcml6b25hMRMwEQYDVQQHEwpTY290dHNkYWxlMSUwIwYDVQQKExxTdGFy",
										"ZmllbGQgVGVjaG5vbG9naWVzLCBJbmMuMTswOQYDVQQDEzJTdGFyZmllbGQgU2Vy",
										"dmljZXMgUm9vdCBDZXJ0aWZpY2F0ZSBBdXRob3JpdHkgLSBHMjCCASIwDQYJKoZI",
										"hvcNAQEBBQADggEPADCCAQoCggEBANUMOsQq+U7i9b4Zl1+OiFOxHz/Lz58gE20p",
										"OsgPfTz3a3Y4Y9k2YKibXlwAgLIvWX/2h/klQ4bnaRtSmpDhcePYLQ1Ob/bISdm2",
										"8xpWriu2dBTrz/sm4xq6HZYuajtYlIlHVv8loJNwU4PahHQUw2eeBGg6345AWh1K",
										"Ts9DkTvnVtYAcMtS7nt9rjrnvDH5RfbCYM8TWQIrgMw0R9+53pBlbQLPLJGmpufe",
										"hRhJfGZOozptqbXuNC66DQO4M99H67FrjSXZm86B0UVGMpZwh94CDklDhbZsc7tk",
										"6mFBrMnUVN+HL8cisibMn1lUaJ/8viovxFUcdUBgF4UCVTmLfwUCAwEAAaNCMEAw",
										"DwYDVR0TAQH/BAUwAwEB/zAOBgNVHQ8BAf8EBAMCAQYwHQYDVR0OBBYEFJxfAN+q",
										"AdcwKziIorhtSpzyEZGDMA0GCSqGSIb3DQEBCwUAA4IBAQBLNqaEd2ndOxmfZyMI",
										"bw5hyf2E3F/YNoHN2BtBLZ9g3ccaaNnRbobhiCPPE95Dz+I0swSdHynVv/heyNXB",
										"ve6SbzJ08pGCL72CQnqtKrcgfU28elUSwhXqvfdqlS5sdJ/PHLTyxQGjhdByPq1z",
										"qwubdQxtRbeOlKyWN7Wg0I8VRw7j6IPdj/3vQQF3zCepYoUz8jcI73HPdwbeyBkd",
										"iEDPfUYd/x7H4c7/I9vG+o1VTqkC50cRRj70/b17KSa7qWFiNyi2LSr2EIZkyXCn",
										"0q23KXB56jzaYyWf/Wi3MOxw+3WKt21gZ7IeyLnp2KhvAotnDU0mV3HaIPzBSlCN",
										"sSi6",
										"-----END CERTIFICATE-----'",
										"set comment 'https://www.amazontrust.com/repository/'",
										"next",
										"end",
										"config system ha",
										"set mode a-p",
										"set group-id 1",
										"set group-name Group1",
										"set hb-interface port1",
										"set preferred-role primary",
										"config peer",
										"edit 1",
										{
											"Fn::Join": [
												"",
												[
													"set addr ",
													{
														"Fn::Select": [
															"0",
															{
																"Fn::Split": [
																	"/",
																	{
																		"Ref": "FortiAnalyzer2PrimaryIP"
																	}
																]
															}
														]
													}
												]
											]
										},
										{
											"Fn::Join": [
												"",
												[
													"set serial-number ",
													{
														"Ref": "FortiAnalyzer2SerialNumber"
													}
												]
											]
										},
										"next",
										"end",
										"config vip",
										"edit 1",
										{
											"Fn::Join": [
												"",
												[
													"set vip ",
													{
														"Fn::Select": [
															"0",
															{
																"Fn::Split": [
																	"/",
																	{
																		"Ref": "ClusterIP"
																	}
																]
															}
														]
													}
												]
											]
										},
										"set vip-interface port1",
										"next",
										"end",
										"end",
										"",
										{
											"Fn::If": [
												"FortiFlex",
												{
													"Fn::Sub": [
														"exec vm-license ${token}",
														{
															"token": {
																"Ref": "FortiAnalyzer1FortiFlexToken"
															}
														}
													]
												},
												{
													"Ref": "AWS::NoValue"
												}
											]
										},
										"--==Boundary==--"
									]
								]
							}
						]
					}
				}
			}
		},
		"Faz1Eni0": {
			"Type": "AWS::EC2::NetworkInterface",
			"Properties": {
				"Description": "port1",
				"GroupSet": [
					{
						"Ref": "FortiAnalyzerSecGrp"
					}
				],
				"SourceDestCheck": "false",
				"SubnetId": {
					"Ref": "PublicOrPrivateSubnet"
				},
				"Tags": [
					{
						"Key": "Name",
						"Value": {
							"Fn::Join": [
								"",
								[
									{
										"Ref": "AWS::StackName"
									},
									"-faz1eni0"
								]
							]
						}
					},
					{
						"Key": "Interface",
						"Value": "eth0"
					},
					{
						"Key": "viptag",
						"Value": {
							"Fn::Select": [
								"0",
								{
									"Fn::Split": [
										"/",
										{
											"Ref": "ClusterIP"
										}
									]
								}
							]
						}
					}
				],
				"PrivateIpAddresses": [
					{
						"PrivateIpAddress": {
							"Fn::Select": [
								"0",
								{
									"Fn::Split": [
										"/",
										{
											"Ref": "FortiAnalyzer1PrimaryIP"
										}
									]
								}
							]
						},
						"Primary": "true"
					},
					{
						"PrivateIpAddress": {
							"Fn::Select": [
								"0",
								{
									"Fn::Split": [
										"/",
										{
											"Ref": "ClusterIP"
										}
									]
								}
							]
						},
						"Primary": "false"
					}
				]
			}
		},
		"Faz1EIP": {
			"Type": "AWS::EC2::EIP",
			"Condition": "CreateEIP",
			"Properties": {
				"Domain": "VPCID",
				"Tags": [
					{
						"Key": "Name",
						"Value": {
							"Fn::Join": [
								"",
								[
									{
										"Ref": "AWS::StackName"
									},
									"-FortiAnalyzer1"
								]
							]
						}
					}
				]
			}
		},
		"Faz1EIPASSOCIATION": {
			"Type": "AWS::EC2::EIPAssociation",
			"Condition": "CreateEIP",
			"Properties": {
				"AllocationId": {
					"Fn::GetAtt": [
						"Faz1EIP",
						"AllocationId"
					]
				},
				"NetworkInterfaceId": {
					"Ref": "Faz1Eni0"
				},
				"PrivateIpAddress": {
					"Fn::Select": [
						"0",
						{
							"Fn::Split": [
								"/",
								{
									"Ref": "FortiAnalyzer1PrimaryIP"
								}
							]
						}
					]
				}
			},
			"DependsOn": [
				"Faz1",
				"Faz1Eni0",
				"Faz1EIP"
			]
		},
		"FazClusterEIP": {
			"Type": "AWS::EC2::EIP",
			"Condition": "CreateEIP",
			"Properties": {
				"Domain": "VPCID",
				"Tags": [
					{
						"Key": "Name",
						"Value": {
							"Fn::Join": [
								"",
								[
									{
										"Ref": "AWS::StackName"
									},
									"-FortiAnalyzerCluster"
								]
							]
						}
					}
				]
			}
		},
		"FazClusterEIPASSOCIATION": {
			"Type": "AWS::EC2::EIPAssociation",
			"Condition": "CreateEIP",
			"Properties": {
				"AllocationId": {
					"Fn::GetAtt": [
						"FazClusterEIP",
						"AllocationId"
					]
				},
				"NetworkInterfaceId": {
					"Ref": "Faz1Eni0"
				},
				"PrivateIpAddress": {
					"Fn::Select": [
						"0",
						{
							"Fn::Split": [
								"/",
								{
									"Ref": "ClusterIP"
								}
							]
						}
					]
				}
			},
			"DependsOn": [
				"Faz1",
				"Faz1Eni0",
				"FazClusterEIP"
			]
		},
		"Faz2": {
			"Type": "AWS::EC2::Instance",
			"Properties": {
				"ImageId": {
					"Fn::GetAtt": [
						"RunImageFunction",
						"ami"
					]
				},
				"InstanceType": {
					"Ref": "InstanceType"
				},
				"IamInstanceProfile": {
					"Ref": "InstanceProfile"
				},
				"KeyName": {
					"Ref": "KeyPair"
				},
				"BlockDeviceMappings": [
					{
						"DeviceName": "/dev/sda1",
						"Ebs": {
							"VolumeType": "gp2",
							"VolumeSize": "5",
							"DeleteOnTermination": "true",
							"Encrypted": {
								"Ref": "EncryptVolumes"
							}
						}
					},
					{
						"DeviceName": "/dev/sdb",
						"Ebs": {
							"VolumeType": "gp2",
							"VolumeSize": "80",
							"DeleteOnTermination": "true",
							"Encrypted": {
								"Ref": "EncryptVolumes"
							}
						}
					}
				],
				"NetworkInterfaces": [
					{
						"NetworkInterfaceId": {
							"Ref": "Faz2Eni0"
						},
						"DeviceIndex": "0"
					}
				],
				"Tags": [
					{
						"Key": "Name",
						"Value": {
							"Fn::Join": [
								"",
								[
									{
										"Ref": "AWS::StackName"
									},
									"-FortiAnalyzer2"
								]
							]
						}
					}
				],
				"UserData": {
					"Fn::Base64": {
						"Fn::If": [
							"BYOL",
							{
								"Fn::Join": [
									"",
									[
										"{\n",
										"\"bucket\"",
										" : \"",
										{
											"Ref": "InitS3Bucket"
										},
										"\"",
										",\n",
										"\"region\"",
										" : ",
										"\"",
										{
											"Ref": "AWS::Region"
										},
										"\"",
										",\n",
										"\"license\"",
										" : ",
										"\"",
										"/",
										{
											"Ref": "FortiAnalyzer2LicenseFile"
										},
										"\"",
										",\n",
										"\"config\"",
										" : ",
										"\"",
										"/faz2-config.txt\"",
										"\n",
										"}"
									]
								]
							},
							{
								"Fn::Join": [
									"\n",
									[
										"Content-Type: multipart/mixed; boundary='==Boundary=='",
										"MIME-Version: 1.0",
										"",
										"--==Boundary==",
										"Content-Type: text/x-shellscript; charset='us-ascii'",
										"MIME-Version: 1.0",
										"",
										"config system global",
										{
											"Fn::Join": [
												"",
												[
													"set hostname ",
													{
														"Ref": "AWS::StackName"
													},
													"-Faz2"
												]
											]
										},
										"end",
										"config system interface",
										"edit port1",
										"set mode dhcp",
										"set allowaccess https ping",
										"next",
										"end",
										"config system certificate ca",
										"edit 'AmazonRootCA1'",
										"set ca '-----BEGIN CERTIFICATE-----",
										"MIIDQTCCAimgAwIBAgITBmyfz5m/jAo54vB4ikPmljZbyjANBgkqhkiG9w0BAQsF",
										"ADA5MQswCQYDVQQGEwJVUzEPMA0GA1UEChMGQW1hem9uMRkwFwYDVQQDExBBbWF6",
										"b24gUm9vdCBDQSAxMB4XDTE1MDUyNjAwMDAwMFoXDTM4MDExNzAwMDAwMFowOTEL",
										"MAkGA1UEBhMCVVMxDzANBgNVBAoTBkFtYXpvbjEZMBcGA1UEAxMQQW1hem9uIFJv",
										"b3QgQ0EgMTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALJ4gHHKeNXj",
										"ca9HgFB0fW7Y14h29Jlo91ghYPl0hAEvrAIthtOgQ3pOsqTQNroBvo3bSMgHFzZM",
										"9O6II8c+6zf1tRn4SWiw3te5djgdYZ6k/oI2peVKVuRF4fn9tBb6dNqcmzU5L/qw",
										"IFAGbHrQgLKm+a/sRxmPUDgH3KKHOVj4utWp+UhnMJbulHheb4mjUcAwhmahRWa6",
										"VOujw5H5SNz/0egwLX0tdHA114gk957EWW67c4cX8jJGKLhD+rcdqsq08p8kDi1L",
										"93FcXmn/6pUCyziKrlA4b9v7LWIbxcceVOF34GfID5yHI9Y/QCB/IIDEgEw+OyQm",
										"jgSubJrIqg0CAwEAAaNCMEAwDwYDVR0TAQH/BAUwAwEB/zAOBgNVHQ8BAf8EBAMC",
										"AYYwHQYDVR0OBBYEFIQYzIU07LwMlJQuCFmcx7IQTgoIMA0GCSqGSIb3DQEBCwUA",
										"A4IBAQCY8jdaQZChGsV2USggNiMOruYou6r4lK5IpDB/G/wkjUu0yKGX9rbxenDI",
										"U5PMCCjjmCXPI6T53iHTfIUJrU6adTrCC2qJeHZERxhlbI1Bjjt/msv0tadQ1wUs",
										"N+gDS63pYaACbvXy8MWy7Vu33PqUXHeeE6V/Uq2V8viTO96LXFvKWlJbYK8U90vv",
										"o/ufQJVtMVT8QtPHRh8jrdkPSHCa2XV4cdFyQzR1bldZwgJcJmApzyMZFo6IQ6XU",
										"5MsI+yMRQ+hDKXJioaldXgjUkK642M4UwtBV8ob2xJNDd2ZhwLnoQdeXeGADbkpy",
										"rqXRfboQnoZsG4q5WTP468SQvvG5",
										"-----END CERTIFICATE-----'",
										"set comment 'https://www.amazontrust.com/repository/'",
										"next",
										"edit 'AmazonRootCA2'",
										"set ca '-----BEGIN CERTIFICATE-----",
										"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",
										"4PsJYGw=",
										"-----END CERTIFICATE-----'",
										"set comment 'https://www.amazontrust.com/repository/'",
										"next",
										"edit 'AmazonRootCA3'",
										"set ca '-----BEGIN CERTIFICATE-----",
										"MIIBtjCCAVugAwIBAgITBmyf1XSXNmY/Owua2eiedgPySjAKBggqhkjOPQQDAjA5",
										"MQswCQYDVQQGEwJVUzEPMA0GA1UEChMGQW1hem9uMRkwFwYDVQQDExBBbWF6b24g",
										"Um9vdCBDQSAzMB4XDTE1MDUyNjAwMDAwMFoXDTQwMDUyNjAwMDAwMFowOTELMAkG",
										"A1UEBhMCVVMxDzANBgNVBAoTBkFtYXpvbjEZMBcGA1UEAxMQQW1hem9uIFJvb3Qg",
										"Q0EgMzBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABCmXp8ZBf8ANm+gBG1bG8lKl",
										"ui2yEujSLtf6ycXYqm0fc4E7O5hrOXwzpcVOho6AF2hiRVd9RFgdszflZwjrZt6j",
										"QjBAMA8GA1UdEwEB/wQFMAMBAf8wDgYDVR0PAQH/BAQDAgGGMB0GA1UdDgQWBBSr",
										"ttvXBp43rDCGB5Fwx5zEGbF4wDAKBggqhkjOPQQDAgNJADBGAiEA4IWSoxe3jfkr",
										"BqWTrBqYaGFy+uGh0PsceGCmQ5nFuMQCIQCcAu/xlJyzlvnrxir4tiz+OpAUFteM",
										"YyRIHN8wfdVoOw==",
										"-----END CERTIFICATE-----'",
										"set comment 'https://www.amazontrust.com/repository/'",
										"next",
										"edit 'AmazonRootCA4'",
										"set ca '-----BEGIN CERTIFICATE-----",
										"MIIB8jCCAXigAwIBAgITBmyf18G7EEwpQ+Vxe3ssyBrBDjAKBggqhkjOPQQDAzA5",
										"MQswCQYDVQQGEwJVUzEPMA0GA1UEChMGQW1hem9uMRkwFwYDVQQDExBBbWF6b24g",
										"Um9vdCBDQSA0MB4XDTE1MDUyNjAwMDAwMFoXDTQwMDUyNjAwMDAwMFowOTELMAkG",
										"A1UEBhMCVVMxDzANBgNVBAoTBkFtYXpvbjEZMBcGA1UEAxMQQW1hem9uIFJvb3Qg",
										"Q0EgNDB2MBAGByqGSM49AgEGBSuBBAAiA2IABNKrijdPo1MN/sGKe0uoe0ZLY7Bi",
										"9i0b2whxIdIA6GO9mif78DluXeo9pcmBqqNbIJhFXRbb/egQbeOc4OO9X4Ri83Bk",
										"M6DLJC9wuoihKqB1+IGuYgbEgds5bimwHvouXKNCMEAwDwYDVR0TAQH/BAUwAwEB",
										"/zAOBgNVHQ8BAf8EBAMCAYYwHQYDVR0OBBYEFNPsxzplbszh2naaVvuc84ZtV+WB",
										"MAoGCCqGSM49BAMDA2gAMGUCMDqLIfG9fhGt0O9Yli/W651+kI0rz2ZVwyzjKKlw",
										"CkcO8DdZEv8tmZQoTipPNU0zWgIxAOp1AE47xDqUEpHJWEadIRNyp4iciuRMStuW",
										"1KyLa2tJElMzrdfkviT8tQp21KW8EA==",
										"-----END CERTIFICATE-----'",
										"set comment 'https://www.amazontrust.com/repository/'",
										"next",
										"edit 'SFSRootCAG2'",
										"set ca '-----BEGIN CERTIFICATE-----",
										"MIID7zCCAtegAwIBAgIBADANBgkqhkiG9w0BAQsFADCBmDELMAkGA1UEBhMCVVMx",
										"EDAOBgNVBAgTB0FyaXpvbmExEzARBgNVBAcTClNjb3R0c2RhbGUxJTAjBgNVBAoT",
										"HFN0YXJmaWVsZCBUZWNobm9sb2dpZXMsIEluYy4xOzA5BgNVBAMTMlN0YXJmaWVs",
										"ZCBTZXJ2aWNlcyBSb290IENlcnRpZmljYXRlIEF1dGhvcml0eSAtIEcyMB4XDTA5",
										"MDkwMTAwMDAwMFoXDTM3MTIzMTIzNTk1OVowgZgxCzAJBgNVBAYTAlVTMRAwDgYD",
										"VQQIEwdBcml6b25hMRMwEQYDVQQHEwpTY290dHNkYWxlMSUwIwYDVQQKExxTdGFy",
										"ZmllbGQgVGVjaG5vbG9naWVzLCBJbmMuMTswOQYDVQQDEzJTdGFyZmllbGQgU2Vy",
										"dmljZXMgUm9vdCBDZXJ0aWZpY2F0ZSBBdXRob3JpdHkgLSBHMjCCASIwDQYJKoZI",
										"hvcNAQEBBQADggEPADCCAQoCggEBANUMOsQq+U7i9b4Zl1+OiFOxHz/Lz58gE20p",
										"OsgPfTz3a3Y4Y9k2YKibXlwAgLIvWX/2h/klQ4bnaRtSmpDhcePYLQ1Ob/bISdm2",
										"8xpWriu2dBTrz/sm4xq6HZYuajtYlIlHVv8loJNwU4PahHQUw2eeBGg6345AWh1K",
										"Ts9DkTvnVtYAcMtS7nt9rjrnvDH5RfbCYM8TWQIrgMw0R9+53pBlbQLPLJGmpufe",
										"hRhJfGZOozptqbXuNC66DQO4M99H67FrjSXZm86B0UVGMpZwh94CDklDhbZsc7tk",
										"6mFBrMnUVN+HL8cisibMn1lUaJ/8viovxFUcdUBgF4UCVTmLfwUCAwEAAaNCMEAw",
										"DwYDVR0TAQH/BAUwAwEB/zAOBgNVHQ8BAf8EBAMCAQYwHQYDVR0OBBYEFJxfAN+q",
										"AdcwKziIorhtSpzyEZGDMA0GCSqGSIb3DQEBCwUAA4IBAQBLNqaEd2ndOxmfZyMI",
										"bw5hyf2E3F/YNoHN2BtBLZ9g3ccaaNnRbobhiCPPE95Dz+I0swSdHynVv/heyNXB",
										"ve6SbzJ08pGCL72CQnqtKrcgfU28elUSwhXqvfdqlS5sdJ/PHLTyxQGjhdByPq1z",
										"qwubdQxtRbeOlKyWN7Wg0I8VRw7j6IPdj/3vQQF3zCepYoUz8jcI73HPdwbeyBkd",
										"iEDPfUYd/x7H4c7/I9vG+o1VTqkC50cRRj70/b17KSa7qWFiNyi2LSr2EIZkyXCn",
										"0q23KXB56jzaYyWf/Wi3MOxw+3WKt21gZ7IeyLnp2KhvAotnDU0mV3HaIPzBSlCN",
										"sSi6",
										"-----END CERTIFICATE-----'",
										"set comment 'https://www.amazontrust.com/repository/'",
										"next",
										"end",
										"config system ha",
										"set mode a-p",
										"set group-id 1",
										"set group-name Group1",
										"set hb-interface port1",
										"set preferred-role secondary",
										"config peer",
										"edit 1",
										{
											"Fn::Join": [
												"",
												[
													"set addr ",
													{
														"Fn::Select": [
															"0",
															{
																"Fn::Split": [
																	"/",
																	{
																		"Ref": "FortiAnalyzer1PrimaryIP"
																	}
																]
															}
														]
													}
												]
											]
										},
										{
											"Fn::Join": [
												"",
												[
													"set serial-number ",
													{
														"Ref": "FortiAnalyzer1SerialNumber"
													}
												]
											]
										},
										"next",
										"end",
										"config vip",
										"edit 1",
										{
											"Fn::Join": [
												"",
												[
													"set vip ",
													{
														"Fn::Select": [
															"0",
															{
																"Fn::Split": [
																	"/",
																	{
																		"Ref": "ClusterIP"
																	}
																]
															}
														]
													}
												]
											]
										},
										"set vip-interface port1",
										"next",
										"end",
										"end",
										"",
										{
											"Fn::If": [
												"FortiFlex",
												{
													"Fn::Sub": [
														"exec vm-license ${token}",
														{
															"token": {
																"Ref": "FortiAnalyzer2FortiFlexToken"
															}
														}
													]
												},
												{
													"Ref": "AWS::NoValue"
												}
											]
										},
										"--==Boundary==--"
									]
								]
							}
						]
					}
				}
			}
		},
		"Faz2Eni0": {
			"Type": "AWS::EC2::NetworkInterface",
			"Properties": {
				"Description": "port1",
				"GroupSet": [
					{
						"Ref": "FortiAnalyzerSecGrp"
					}
				],
				"SourceDestCheck": "false",
				"SubnetId": {
					"Ref": "PublicOrPrivateSubnet"
				},
				"Tags": [
					{
						"Key": "Name",
						"Value": {
							"Fn::Join": [
								"",
								[
									{
										"Ref": "AWS::StackName"
									},
									"-faz2eni0"
								]
							]
						}
					},
					{
						"Key": "Interface",
						"Value": "eth0"
					},
					{
						"Key": "viptag",
						"Value": {
							"Fn::Select": [
								"0",
								{
									"Fn::Split": [
										"/",
										{
											"Ref": "ClusterIP"
										}
									]
								}
							]
						}
					}
				],
				"PrivateIpAddresses": [
					{
						"PrivateIpAddress": {
							"Fn::Select": [
								"0",
								{
									"Fn::Split": [
										"/",
										{
											"Ref": "FortiAnalyzer2PrimaryIP"
										}
									]
								}
							]
						},
						"Primary": "true"
					}
				]
			}
		},
		"Faz2EIP": {
			"Type": "AWS::EC2::EIP",
			"Condition": "CreateEIP",
			"Properties": {
				"Domain": "VPCID",
				"Tags": [
					{
						"Key": "Name",
						"Value": {
							"Fn::Join": [
								"",
								[
									{
										"Ref": "AWS::StackName"
									},
									"-FortiAnalyzer2"
								]
							]
						}
					}
				]
			}
		},
		"Faz2EIPASSOCIATION": {
			"Type": "AWS::EC2::EIPAssociation",
			"Condition": "CreateEIP",
			"Properties": {
				"AllocationId": {
					"Fn::GetAtt": [
						"Faz2EIP",
						"AllocationId"
					]
				},
				"NetworkInterfaceId": {
					"Ref": "Faz2Eni0"
				},
				"PrivateIpAddress": {
					"Fn::Select": [
						"0",
						{
							"Fn::Split": [
								"/",
								{
									"Ref": "FortiAnalyzer2PrimaryIP"
								}
							]
						}
					]
				}
			},
			"DependsOn": [
				"Faz2",
				"Faz2Eni0",
				"Faz2EIP"
			]
		},
		"LambdaRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"AssumeRolePolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [
						{
							"Effect": "Allow",
							"Principal": {
								"Service": [
									"lambda.amazonaws.com"
								]
							},
							"Action": [
								"sts:AssumeRole"
							]
						}
					]
				},
				"Path": "/",
				"Policies": [
					{
						"PolicyName": "S3AccessRole",
						"PolicyDocument": {
							"Version": "2012-10-17",
							"Statement": [
								{
									"Effect": "Allow",
									"Action": [
										"s3:PutObject",
										"ec2:DescribeImages"
									],
									"Resource": "*"
								},
								{
									"Effect": "Allow",
									"Action": [
										"logs:*"
									],
									"Resource": "*"
								}
							]
						}
					}
				]
			}
		},
		"ImageFunction": {
			"Type": "AWS::Lambda::Function",
			"Properties": {
				"Code": {
					"ZipFile": {
						"Fn::Join": [
							"\n",
							[
								"import boto3",
								"import cfnresponse",
								"import logging",
								"import json",
								"logger = logging.getLogger()",
								"logger.setLevel(logging.INFO)",
								"client = boto3.client('ec2')",
								"",
								"def handler(event, context):",
								"    if event['RequestType'] == 'Create':",
								"        logger.info('<-- event received: {}'.format(json.dumps(event)))",
								"        searchString = event['ResourceProperties']['SearchString']",
								"        productCode =  event['ResourceProperties']['ProductCode']",
								"    else:",
								"        responseData = {'msg':'200'}",
								"        cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)",
								"        return None",
								"",
								"    try:",
								"        resp = client.describe_images(",
								"            Filters=[{'Name': 'name', 'Values': [searchString]}, {'Name': 'product-code', 'Values': [productCode]}],",
								"            Owners=['aws-marketplace']",
								"        )",
								"    except Exception as error:",
								"        logger.error('<--!! Exception: {}'.format(error))",
								"        responseData = {'msg':'Exception: {}'.format(error)}",
								"        cfnresponse.send(event, context, cfnresponse.FAILED, responseData)",
								"",
								"    if resp['ResponseMetadata']['HTTPStatusCode'] == 200 and resp['Images'] != []:",
								"        ami_dict = {}",
								"        ami_list = []",
								"        for entry in resp['Images']:",
								"            key = entry['CreationDate']",
								"            ami_dict[key] = entry['ImageId']",
								"        ami_list = sorted(ami_dict, reverse = True)",
								"        logger.info('--> found latest AMI: {}, {}, {} {}'.format(ami_dict[ami_list[0]], ami_list[0], searchString, productCode))",
								"        responseData = {'ami': ami_dict[ami_list[0]]}",
								"        cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)",
								"    else:",
								"        logger.error('!!--> Unable to find AMI {} {} in describe_images response! {}'.format(searchString, productCode, resp))",
								"        responseData = {'msg':'Unable to find AMI {} {} in describe_images response! {}'.format(searchString, productCode,resp)}",
								"        cfnresponse.send(event, context, cfnresponse.FAILED, responseData)",
								""
							]
						]
					}
				},
				"Role": {
					"Fn::GetAtt": [
						"LambdaRole",
						"Arn"
					]
				},
				"Timeout": 120,
				"Handler": "index.handler",
				"Runtime": "python3.9",
				"MemorySize": 128
			}
		},
		"RunImageFunction": {
			"Type": "Custom::ImageFunction",
			"Properties": {
				"ServiceToken": {
					"Fn::GetAtt": [
						"ImageFunction",
						"Arn"
					]
				},
				"SearchString": {
					"Fn::Select": [
						"0",
						{
							"Fn::Split": [
								"|",
								{
									"Fn::FindInMap": [
										"FortiAnalyzerAMISearchString",
										{
											"Ref": "FortiAnalyzerVersion"
										},
										{
											"Ref": "LicenseType"
										}
									]
								}
							]
						}
					]
				},
				"ProductCode": {
					"Fn::Select": [
						"1",
						{
							"Fn::Split": [
								"|",
								{
									"Fn::FindInMap": [
										"FortiAnalyzerAMISearchString",
										{
											"Ref": "FortiAnalyzerVersion"
										},
										{
											"Ref": "LicenseType"
										}
									]
								}
							]
						}
					]
				}
			}
		},
		"InitFunction": {
			"Type": "AWS::Lambda::Function",
			"Condition": "BYOL",
			"Properties": {
				"Code": {
					"ZipFile": {
						"Fn::Join": [
							"\n",
							[
								"import ast",
								"import boto3",
								"import cfnresponse",
								"import json",
								"import logging",
								"logger = logging.getLogger()",
								"logger.setLevel(logging.INFO)",
								"s3 = boto3.client('s3')",
								"",
								"template = '''\\",
								"config system global",
								"set hostname {Hostname}",
								"end",
								"config system interface",
								"edit port1",
								"set mode dhcp",
								"set allowaccess https ping",
								"next",
								"end",
								"config system certificate ca",
								"edit 'AmazonRootCA1'",
								"set ca '-----BEGIN CERTIFICATE-----",
								"MIIDQTCCAimgAwIBAgITBmyfz5m/jAo54vB4ikPmljZbyjANBgkqhkiG9w0BAQsF",
								"ADA5MQswCQYDVQQGEwJVUzEPMA0GA1UEChMGQW1hem9uMRkwFwYDVQQDExBBbWF6",
								"b24gUm9vdCBDQSAxMB4XDTE1MDUyNjAwMDAwMFoXDTM4MDExNzAwMDAwMFowOTEL",
								"MAkGA1UEBhMCVVMxDzANBgNVBAoTBkFtYXpvbjEZMBcGA1UEAxMQQW1hem9uIFJv",
								"b3QgQ0EgMTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALJ4gHHKeNXj",
								"ca9HgFB0fW7Y14h29Jlo91ghYPl0hAEvrAIthtOgQ3pOsqTQNroBvo3bSMgHFzZM",
								"9O6II8c+6zf1tRn4SWiw3te5djgdYZ6k/oI2peVKVuRF4fn9tBb6dNqcmzU5L/qw",
								"IFAGbHrQgLKm+a/sRxmPUDgH3KKHOVj4utWp+UhnMJbulHheb4mjUcAwhmahRWa6",
								"VOujw5H5SNz/0egwLX0tdHA114gk957EWW67c4cX8jJGKLhD+rcdqsq08p8kDi1L",
								"93FcXmn/6pUCyziKrlA4b9v7LWIbxcceVOF34GfID5yHI9Y/QCB/IIDEgEw+OyQm",
								"jgSubJrIqg0CAwEAAaNCMEAwDwYDVR0TAQH/BAUwAwEB/zAOBgNVHQ8BAf8EBAMC",
								"AYYwHQYDVR0OBBYEFIQYzIU07LwMlJQuCFmcx7IQTgoIMA0GCSqGSIb3DQEBCwUA",
								"A4IBAQCY8jdaQZChGsV2USggNiMOruYou6r4lK5IpDB/G/wkjUu0yKGX9rbxenDI",
								"U5PMCCjjmCXPI6T53iHTfIUJrU6adTrCC2qJeHZERxhlbI1Bjjt/msv0tadQ1wUs",
								"N+gDS63pYaACbvXy8MWy7Vu33PqUXHeeE6V/Uq2V8viTO96LXFvKWlJbYK8U90vv",
								"o/ufQJVtMVT8QtPHRh8jrdkPSHCa2XV4cdFyQzR1bldZwgJcJmApzyMZFo6IQ6XU",
								"5MsI+yMRQ+hDKXJioaldXgjUkK642M4UwtBV8ob2xJNDd2ZhwLnoQdeXeGADbkpy",
								"rqXRfboQnoZsG4q5WTP468SQvvG5",
								"-----END CERTIFICATE-----'",
								"set comment 'https://www.amazontrust.com/repository/'",
								"next",
								"edit 'AmazonRootCA2'",
								"set ca '-----BEGIN CERTIFICATE-----",
								"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",
								"4PsJYGw=",
								"-----END CERTIFICATE-----'",
								"set comment 'https://www.amazontrust.com/repository/'",
								"next",
								"edit 'AmazonRootCA3'",
								"set ca '-----BEGIN CERTIFICATE-----",
								"MIIBtjCCAVugAwIBAgITBmyf1XSXNmY/Owua2eiedgPySjAKBggqhkjOPQQDAjA5",
								"MQswCQYDVQQGEwJVUzEPMA0GA1UEChMGQW1hem9uMRkwFwYDVQQDExBBbWF6b24g",
								"Um9vdCBDQSAzMB4XDTE1MDUyNjAwMDAwMFoXDTQwMDUyNjAwMDAwMFowOTELMAkG",
								"A1UEBhMCVVMxDzANBgNVBAoTBkFtYXpvbjEZMBcGA1UEAxMQQW1hem9uIFJvb3Qg",
								"Q0EgMzBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABCmXp8ZBf8ANm+gBG1bG8lKl",
								"ui2yEujSLtf6ycXYqm0fc4E7O5hrOXwzpcVOho6AF2hiRVd9RFgdszflZwjrZt6j",
								"QjBAMA8GA1UdEwEB/wQFMAMBAf8wDgYDVR0PAQH/BAQDAgGGMB0GA1UdDgQWBBSr",
								"ttvXBp43rDCGB5Fwx5zEGbF4wDAKBggqhkjOPQQDAgNJADBGAiEA4IWSoxe3jfkr",
								"BqWTrBqYaGFy+uGh0PsceGCmQ5nFuMQCIQCcAu/xlJyzlvnrxir4tiz+OpAUFteM",
								"YyRIHN8wfdVoOw==",
								"-----END CERTIFICATE-----'",
								"set comment 'https://www.amazontrust.com/repository/'",
								"next",
								"edit 'AmazonRootCA4'",
								"set ca '-----BEGIN CERTIFICATE-----",
								"MIIB8jCCAXigAwIBAgITBmyf18G7EEwpQ+Vxe3ssyBrBDjAKBggqhkjOPQQDAzA5",
								"MQswCQYDVQQGEwJVUzEPMA0GA1UEChMGQW1hem9uMRkwFwYDVQQDExBBbWF6b24g",
								"Um9vdCBDQSA0MB4XDTE1MDUyNjAwMDAwMFoXDTQwMDUyNjAwMDAwMFowOTELMAkG",
								"A1UEBhMCVVMxDzANBgNVBAoTBkFtYXpvbjEZMBcGA1UEAxMQQW1hem9uIFJvb3Qg",
								"Q0EgNDB2MBAGByqGSM49AgEGBSuBBAAiA2IABNKrijdPo1MN/sGKe0uoe0ZLY7Bi",
								"9i0b2whxIdIA6GO9mif78DluXeo9pcmBqqNbIJhFXRbb/egQbeOc4OO9X4Ri83Bk",
								"M6DLJC9wuoihKqB1+IGuYgbEgds5bimwHvouXKNCMEAwDwYDVR0TAQH/BAUwAwEB",
								"/zAOBgNVHQ8BAf8EBAMCAYYwHQYDVR0OBBYEFNPsxzplbszh2naaVvuc84ZtV+WB",
								"MAoGCCqGSM49BAMDA2gAMGUCMDqLIfG9fhGt0O9Yli/W651+kI0rz2ZVwyzjKKlw",
								"CkcO8DdZEv8tmZQoTipPNU0zWgIxAOp1AE47xDqUEpHJWEadIRNyp4iciuRMStuW",
								"1KyLa2tJElMzrdfkviT8tQp21KW8EA==",
								"-----END CERTIFICATE-----'",
								"set comment 'https://www.amazontrust.com/repository/'",
								"next",
								"edit 'SFSRootCAG2'",
								"set ca '-----BEGIN CERTIFICATE-----",
								"MIID7zCCAtegAwIBAgIBADANBgkqhkiG9w0BAQsFADCBmDELMAkGA1UEBhMCVVMx",
								"EDAOBgNVBAgTB0FyaXpvbmExEzARBgNVBAcTClNjb3R0c2RhbGUxJTAjBgNVBAoT",
								"HFN0YXJmaWVsZCBUZWNobm9sb2dpZXMsIEluYy4xOzA5BgNVBAMTMlN0YXJmaWVs",
								"ZCBTZXJ2aWNlcyBSb290IENlcnRpZmljYXRlIEF1dGhvcml0eSAtIEcyMB4XDTA5",
								"MDkwMTAwMDAwMFoXDTM3MTIzMTIzNTk1OVowgZgxCzAJBgNVBAYTAlVTMRAwDgYD",
								"VQQIEwdBcml6b25hMRMwEQYDVQQHEwpTY290dHNkYWxlMSUwIwYDVQQKExxTdGFy",
								"ZmllbGQgVGVjaG5vbG9naWVzLCBJbmMuMTswOQYDVQQDEzJTdGFyZmllbGQgU2Vy",
								"dmljZXMgUm9vdCBDZXJ0aWZpY2F0ZSBBdXRob3JpdHkgLSBHMjCCASIwDQYJKoZI",
								"hvcNAQEBBQADggEPADCCAQoCggEBANUMOsQq+U7i9b4Zl1+OiFOxHz/Lz58gE20p",
								"OsgPfTz3a3Y4Y9k2YKibXlwAgLIvWX/2h/klQ4bnaRtSmpDhcePYLQ1Ob/bISdm2",
								"8xpWriu2dBTrz/sm4xq6HZYuajtYlIlHVv8loJNwU4PahHQUw2eeBGg6345AWh1K",
								"Ts9DkTvnVtYAcMtS7nt9rjrnvDH5RfbCYM8TWQIrgMw0R9+53pBlbQLPLJGmpufe",
								"hRhJfGZOozptqbXuNC66DQO4M99H67FrjSXZm86B0UVGMpZwh94CDklDhbZsc7tk",
								"6mFBrMnUVN+HL8cisibMn1lUaJ/8viovxFUcdUBgF4UCVTmLfwUCAwEAAaNCMEAw",
								"DwYDVR0TAQH/BAUwAwEB/zAOBgNVHQ8BAf8EBAMCAQYwHQYDVR0OBBYEFJxfAN+q",
								"AdcwKziIorhtSpzyEZGDMA0GCSqGSIb3DQEBCwUAA4IBAQBLNqaEd2ndOxmfZyMI",
								"bw5hyf2E3F/YNoHN2BtBLZ9g3ccaaNnRbobhiCPPE95Dz+I0swSdHynVv/heyNXB",
								"ve6SbzJ08pGCL72CQnqtKrcgfU28elUSwhXqvfdqlS5sdJ/PHLTyxQGjhdByPq1z",
								"qwubdQxtRbeOlKyWN7Wg0I8VRw7j6IPdj/3vQQF3zCepYoUz8jcI73HPdwbeyBkd",
								"iEDPfUYd/x7H4c7/I9vG+o1VTqkC50cRRj70/b17KSa7qWFiNyi2LSr2EIZkyXCn",
								"0q23KXB56jzaYyWf/Wi3MOxw+3WKt21gZ7IeyLnp2KhvAotnDU0mV3HaIPzBSlCN",
								"sSi6",
								"-----END CERTIFICATE-----'",
								"set comment 'https://www.amazontrust.com/repository/'",
								"next",
								"end",
								"config system ha",
								"set mode a-p",
								"set group-id 1",
								"set group-name Group1",
								"set hb-interface port1",
								"set preferred-role {Role}",
								"config peer",
								"edit 1",
								"set addr {HaPeerIp}",
								"set serial-number {HaPeerSn}",
								"next",
								"end",
								"config vip",
								"edit 1",
								"set vip {HaVip}",
								"set vip-interface port1",
								"next",
								"end",
								"end",
								"",
								"\\",
								"'''",
								"",
								"def handler(event, context):",
								"    if event['RequestType'] == 'Create':",
								"        logger.info('<-- event received: {}'.format(json.dumps(event)))",
								"        dict1 = ast.literal_eval(event['ResourceProperties']['FAZ1Info'])",
								"        dict2 = ast.literal_eval(event['ResourceProperties']['FAZ2Info'])",
								"        faz1_conf = template.format(**dict1)",
								"        faz2_conf = template.format(**dict2)",
								"        faz1_result = False",
								"        faz2_result = False",
								"    else:",
								"        responseData = {'msg':'200'}",
								"        cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)",
								"        return None",
								"",
								"    try:",
								"        response = s3.put_object(Body=faz1_conf, Bucket=event['ResourceProperties']['S3Bucket'], Key='faz1-config.txt')",
								"    except Exception as error:",
								"        logger.error('<--!! Exception: {}'.format(error))",
								"        responseData = {'msg':'Exception: {}'.format(error)}",
								"        cfnresponse.send(event, context, cfnresponse.FAILED, responseData)",
								"        return None",
								"",
								"    if response['ResponseMetadata']['HTTPStatusCode'] == 200:",
								"        responseData = {'msg':'success'}",
								"        faz1_result = True",
								"        logger.info('<-- s3 put_object faz1-config.txt successful')",
								"    else:",
								"        responseData = {'msg':'error'}",
								"        cfnresponse.send(event, context, cfnresponse.FAILED, responseData)",
								"",
								"    try:",
								"        response = s3.put_object(Body=faz2_conf, Bucket=event['ResourceProperties']['S3Bucket'], Key='faz2-config.txt')",
								"    except Exception as error:",
								"        logger.error('<--!! Exception: {}'.format(error))",
								"        responseData = {'msg':'Exception: {}'.format(error)}",
								"        cfnresponse.send(event, context, cfnresponse.FAILED, responseData)",
								"        return None",
								"",
								"    if response['ResponseMetadata']['HTTPStatusCode'] == 200:",
								"        responseData = {'msg':'success'}",
								"        faz2_result = True",
								"        logger.info('<-- s3 put_object faz2-config.txt successful')",
								"    else:",
								"        responseData = {'msg':'error'}",
								"        cfnresponse.send(event, context, cfnresponse.FAILED, responseData)",
								"",
								"    if faz1_result is True and faz2_result is True:",
								"        responseData = {'msg':'200'}",
								"        cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)",
								"    else:",
								"        responseData = {'msg':'error'}",
								"        cfnresponse.send(event, context, cfnresponse.FAILED, responseData)",
								""
							]
						]
					}
				},
				"Role": {
					"Fn::GetAtt": [
						"LambdaRole",
						"Arn"
					]
				},
				"Timeout": 120,
				"Handler": "index.handler",
				"Runtime": "python3.9",
				"MemorySize": 128
			}
		},
		"RunInitFunction": {
			"Type": "Custom::InitFunction",
			"Condition": "BYOL",
			"Properties": {
				"ServiceToken": {
					"Fn::GetAtt": [
						"InitFunction",
						"Arn"
					]
				},
				"S3Bucket": {
					"Ref": "InitS3Bucket"
				},
				"FAZ1Info": {
					"Fn::Join": [
						"",
						[
							"{",
							"'Hostname':'",
							{
								"Fn::Join": [
									"",
									[
										{
											"Ref": "AWS::StackName"
										},
										"-Faz1"
									]
								]
							},
							"',",
							"'Role':'primary',",
							"'HaPeerIp':'",
							{
								"Fn::Select": [
									"0",
									{
										"Fn::Split": [
											"/",
											{
												"Ref": "FortiAnalyzer2PrimaryIP"
											}
										]
									}
								]
							},
							"',",
							"'HaPeerSn':'",
							{
								"Ref": "FortiAnalyzer2SerialNumber"
							},
							"',",
							"'HaVip':'",
							{
								"Fn::Select": [
									"0",
									{
										"Fn::Split": [
											"/",
											{
												"Ref": "ClusterIP"
											}
										]
									}
								]
							},
							"'",
							"}"
						]
					]
				},
				"FAZ2Info": {
					"Fn::Join": [
						"",
						[
							"{",
							"'Hostname':'",
							{
								"Fn::Join": [
									"",
									[
										{
											"Ref": "AWS::StackName"
										},
										"-Faz2"
									]
								]
							},
							"',",
							"'Role':'secondary',",
							"'HaPeerIp':'",
							{
								"Fn::Select": [
									"0",
									{
										"Fn::Split": [
											"/",
											{
												"Ref": "FortiAnalyzer1PrimaryIP"
											}
										]
									}
								]
							},
							"',",
							"'HaPeerSn':'",
							{
								"Ref": "FortiAnalyzer1SerialNumber"
							},
							"',",
							"'HaVip':'",
							{
								"Fn::Select": [
									"0",
									{
										"Fn::Split": [
											"/",
											{
												"Ref": "ClusterIP"
											}
										]
									}
								]
							},
							"'",
							"}"
						]
					]
				}
			}
		}
	},
	"Outputs": {
		"Username": {
			"Value": "admin",
			"Description": "Username for the FortiAnalyzers"
		},
		"Password": {
			"Value": "The instance ID of each FortiAnalyzer",
			"Description": "Initial password for the FortiAnalyzers"
		},
		"FortiAnalyzer1LoginURL": {
			"Value": {
				"Fn::Join": [
					"",
					[
						"https://",
						{
							"Fn::If": [
								"CreateEIP",
								{
									"Ref": "Faz1EIP"
								},
								{
									"Fn::GetAtt": [
										"Faz1Eni0",
										"PrimaryPrivateIpAddress"
									]
								}
							]
						}
					]
				]
			},
			"Description": "Login URL for FortiAnalyzer1"
		},
		"FortiAnalyzer2LoginURL": {
			"Value": {
				"Fn::Join": [
					"",
					[
						"https://",
						{
							"Fn::If": [
								"CreateEIP",
								{
									"Ref": "Faz2EIP"
								},
								{
									"Fn::GetAtt": [
										"Faz2Eni0",
										"PrimaryPrivateIpAddress"
									]
								}
							]
						}
					]
				]
			},
			"Description": "Login URL for FortiAnalyzer2"
		},
		"ClusterLoginURL": {
			"Value": {
				"Fn::Join": [
					"",
					[
						"https://",
						{
							"Fn::If": [
								"CreateEIP",
								{
									"Ref": "FazClusterEIP"
								},
								{
									"Fn::Select": [
										"0",
										{
											"Fn::Split": [
												"/",
												{
													"Ref": "ClusterIP"
												}
											]
										}
									]
								}
							]
						}
					]
				]
			},
			"Description": "Login URL for Cluster"
		}
	}
}